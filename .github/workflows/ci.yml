# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI test easyGOband

on: # ¿Cuando ejecutar?
  push: # Al hacer push a las siguientes ramas
    branches: [test] # o master
  pull_request: # Al crear un pull request a las siguientes ramas
    branches: [test] # o master

jobs:
  ci:
    name: Continuous Integration # Nombre del Job
    runs-on: ubuntu-latest # Ejecutar en Ubuntu
    steps:
      - uses: actions/checkout@v2 # Clonar repositorio actual
      - uses: actions/setup-node@v1 # Usar Node
        with:
          node-version: 12 # Versión de Node
      # Cargar cache de node_modules, para reducir tiempo de instalación en próximas ejecuciones
      - name: Cache node modules
        id: node-cache # Id del cache
        uses: actions/cache@v1
        with:
          path: node_modules
          # Se usará el mismo cache siempre y cuando sea el mismo sistema operativo y no existan cambios en el archivo package-lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      # Instalar dependencias
      #- name: Install dependencies
        # No ejecutar si se obtuvo node_modules de cache
      #  if: steps.node-cache.outputs.cache-hit != 'true' 
       # run: npm install
      # Generar compilación de producción
      #- name: Run Build command
       # run: npm run build -- --prod
      # Ejecutar pruebas unitarias
      #- name: Run Unit tests
       # run: npm run test -- --configuration=ci
        
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: "Build & test"
        run: |
          echo "done!"
          

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{steps.extract_branch.outputs.branch}}"
          prerelease: true
          title: "Development Build"
          
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
        # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          args: '-var="branch=easyGOband-${{steps.extract_branch.outputs.branch}}"'
        env:
          TF_VAR_branch: 'easyGOband-${{steps.extract_branch.outputs.branch}}'
          
          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init 
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
     
      - name: Terraform Apply
        if: github.event_name == 'push'
        env:
          TF_VAR_branch: 'easyGOband-${{steps.extract_branch.outputs.branch}}'
          branch: 'easyGOband-${{steps.extract_branch.outputs.branch}}'
        run: terraform apply -auto-approve
        
